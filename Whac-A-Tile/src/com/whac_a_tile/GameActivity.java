package com.whac_a_tile;


import java.util.ArrayList;

import android.os.Bundle;
import android.os.CountDownTimer;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

public class GameActivity extends Activity 
{
	ImageView tile0, tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8;
	TextView score, timer;

	EditText name;
	int scoreCounter = 0;
	int resGreen = 0;
	int time = 0;
	int rand = 0;
	int rand2 = 0;
	int resRed = 0;
	int tileInAction= 0;
	int tileInAction2=0;
	
	int[]counters = new int[9];

	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_game);

		scoreCounter=0;//increments/decrements the score depending on the user's input.
		time=0;//time counter for change in tile color
		for(int i=0;i<counters.length;i++)
		{
			counters[i]=0;//counters for all tiles is set to zero
		}
		rand=-1;
		resGreen = R.drawable.green_tile;
		resRed = R.drawable.red_tile;
		tile0 = (ImageView)this.findViewById(R.id.game_tile_0);
		tile1 = (ImageView)this.findViewById(R.id.game_tile_1);
		tile2 = (ImageView)this.findViewById(R.id.game_tile_2);
		tile3 = (ImageView)this.findViewById(R.id.game_tile_3);
		tile4 = (ImageView)this.findViewById(R.id.game_tile_4);
		tile5 = (ImageView)this.findViewById(R.id.game_tile_5);
		tile6 = (ImageView)this.findViewById(R.id.game_tile_6);
		tile7 = (ImageView)this.findViewById(R.id.game_tile_7);
		tile8 = (ImageView)this.findViewById(R.id.game_tile_8);
		score = (TextView)this.findViewById(R.id.game_text_score);
		timer = (TextView)this.findViewById(R.id.game_timer);

		
		new CountDownTimer(30000, 700) //Timer: Countdowns from 60s to 0, changes a random tile (to green) every 3 seconds
		{

		     public void onTick(long millisUntilFinished)
		     {
		    	if(time==0)
		    	{
		    		rand =(int)(Math.random() * 4);
		    		rand2 = (int)(Math.random() * 3)+5;
		    		changeImage(rand, rand2, resGreen);//changes the image to green every 3 seconds
		    		
		    	}
		    	 time++;//increments the time counter
		         timer.setText("Time: " + millisUntilFinished / 1000);//displays the the time left
		         score.setText("Score: "+ scoreCounter);//displays the current score
		    
		         if(time==2)//when 3 seconds pass, time is 0 again, previ tile is back to red, new tile turns green
		         {
		        	 changeImage(rand, rand2, resRed);
		        	 time=0;
		        	 resetState();//resets all counters to zero
		         }
		         
		     }

		     public void onFinish() 
		     {
		    	 
		         timer.setText("Time Over!");//Displays the message time over to signal the end
		         score.setText("Score: "+ scoreCounter);
		         showSimplePopUp();
		         
		     }
		  }.start();
		  
		  //Listeners. Only one tile commented, rest follow the same procedure.
		  tile0.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[0]==0 &&(tileInAction==0||tileInAction2==0)) //if the selected tile's numerical counterpart is generated by the random generator, and the tile hasn't been click even once, the score is incremented by 10.
				{
					scoreCounter=scoreCounter+10;
					counters[0]++;//counter incremented so cheating is penalized
				}
				else
				{
					if(counters[0]>0)//checks if counter is more than 0 to see if tile has been pressed before.
					{
						scoreCounter=scoreCounter-2;//clicking on the same tile twice before the image changing is penalized
					}
					else
					{
						scoreCounter=scoreCounter-5;//clicking on a red tile is penalized
					}
				}
				
			}
			  
		  });
		  
		  tile1.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[1]==0 && (tileInAction==1||tileInAction2==1))
				{
					scoreCounter=scoreCounter+10;
					counters[1]++;
				}
				else
				{
					if(counters[1]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile2.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[2]==0 && (tileInAction==2||tileInAction2==2))
				{
					scoreCounter=scoreCounter+10;
					counters[2]++;
				}
				else
				{
					if(counters[2]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
		  });
		  
		  tile3.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[3]==0 && (tileInAction==3||tileInAction2==3))
				{
					scoreCounter=scoreCounter+10;
					counters[3]++;
				}
				else
				{
					if(counters[3]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile4.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[4]==0 && (tileInAction==4||tileInAction2==4))
				{
					scoreCounter=scoreCounter+10;
					counters[4]++;
				}
				else
				{
					if(counters[4]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile5.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[5]==0 && (tileInAction==5||tileInAction2==5))
				{
					scoreCounter=scoreCounter+10;
					counters[5]++;
				}
				else
				{
					if(counters[5]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile6.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[6]==0 && (tileInAction==6||tileInAction2==6))
				{
					scoreCounter=scoreCounter+10;
					counters[6]++;
				}
				else
				{
					if(counters[6]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile7.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[7]==0 && (tileInAction==7||tileInAction2==7))
				{
					scoreCounter=scoreCounter+10;
					counters[7]++;
				}
				else
				{
					if(counters[7]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
		  
		  tile8.setOnClickListener(new OnClickListener()
		  {

			@Override
			public void onClick(View v) 
			{
				if(counters[8]==0 && (tileInAction==8||tileInAction2==8))
				{
					scoreCounter=scoreCounter+10;
					counters[8]++;
				}
				else
				{
					if(counters[8]>0)
					{
						scoreCounter=scoreCounter-2;
					}
					else
					{
						scoreCounter=scoreCounter-5;
					}
				}
				
			}
			  
		  });
			  
		  
		
		}
	private void showSimplePopUp() {

	   	 AlertDialog.Builder helpBuilder = new AlertDialog.Builder(this);
	   	 System.out.print("Print");
	   	 helpBuilder.setTitle("Score");
	   	 helpBuilder.setMessage("Your score was: "+scoreCounter);
	   	 helpBuilder.setPositiveButton("Ok",
	   	   new DialogInterface.OnClickListener() {

	   	    public void onClick(DialogInterface dialog, int which) 
	   	    {
	   	     // Do nothing but close the dialog
	   	    	Intent intent = new Intent(GameActivity.this, MainActivity.class);
					intent.setFlags(intent.FLAG_ACTIVITY_CLEAR_TOP);
					finish();
					startActivity(intent);
	   	    }
	   	   }).show();
	}
	
	private void changeImage(int tileone, int tiletwo, int res)
	{
		tileInAction = tileone;
		tileInAction2 = tiletwo;
		if(tileone==0 || tiletwo==0)
		{
			tile0.setImageResource(res);
		}
		
		if(tileone==1 || tiletwo==1)
		{
			tile1.setImageResource(res);
		}
		
		if(tileone==2 || tiletwo==2)
		{
			tile2.setImageResource(res);
		}
		
		if(tileone==3 || tiletwo==3)
		{
			tile3.setImageResource(res);
		}
		
		if(tileone==4 || tiletwo==4)
		{
			tile4.setImageResource(res);
		}
		
		if(tileone==5 || tiletwo==5)
		{
			tile5.setImageResource(res);
		}
		
		if(tileone==6 || tiletwo==6)
		{
			tile6.setImageResource(res);
		}
		
		if(tileone==7 || tiletwo==7)
		{
			tile7.setImageResource(res);
		}
		
		if(tileone==8 || tiletwo==8)
		{
			tile8.setImageResource(res);
		}
	}
	
	private void resetState()
	{
		for(int i=0;i<counters.length;i++)
		{
			counters[i]=0;//resets all counters to zero
		}
		tileInAction=15;//resets the action tile to a number out of the random generator's reach
		tileInAction2=15;
	}
			
	

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.game, menu);
		return true;
	}

}
